COMMAND LINE, USING DOCKER

<name_zookeeper:port>: zookeeper:2181


#CREAR UN TOPIC CON EL NOMBRE first_topic, SE LE TIENE QUE PASAR:
#EL ZOOKEEPER QUE VA A TENER EL TOPIC
#EL FACTOR DE REPLICACION (COMO HAY UN BROKER, POR AHORA, SE LE PASA 1)
#LA CANTIDAD DE PARTICIONES VA A TENER EL TOPIC
kafka-topics.sh --zookeeper <name_zookeeper:port> --create --replication-factor 1 --partitions 3 --topic <name_topic>

#OBTENER LA LISTA DE TOPICS QUE ESTA QUE HAY UN ZOOKEEPER
kafka-topics.sh --zookeeper <name_zookeeper:port> --list

#OBTENER LA DESCRIPCION DE UN TOPIC
kafka-topics.sh --zookeeper <name_zookeeper:port> --topic <name_topic> --describe

#ELIMINACION DE UN TOPIC
#El topic <name_topic> está marcado para su eliminación
#nota: esto no tendrá ningún impacto si delete.topic.enable no se establece en true
kafka-topics.sh --zookeeper <name_zookeeper:port> --topic <name_topic> --delete


#SE REQUIERE EL TOPIC Y EL BROKER (las direccions de kafka IP)
kafka-console-producer --broker-list kafka:9092 --topic first_topic

kafka-console-producer --broker-list kafka:9092 --topic first_topic --producer-property acks=all

#Si llamos a un topic que no esta creado, por defecto lo crea y 
#tiene los valores por default particion 1 y factor de replicacion 1, (no es lo recomendado)
#HAY QUE CREAR LOS TOPICS ANTES DE LOS PRODUCERS, DE LO CONTRARIO SE CREARAN TOPICS CON CONFIGURACION PREDETERMINADAS
kafka-console-producer --broker-list kafka:9092 --topic new_topic_no_create

#PARA CAMBIAR LOS VALORES PREDETERMINADOS, VAYA LA CARPETA CONFIG DE KAFKA Y EDITE EL ARCHIVO server.properties
#CAMBIEN EL ATRIBUTO num.partitions=1 por num.partitions=3


#REQUIERE --bootstrap-server (es el kafka) y el topic
#Muestra los que va enviando el producer en tiempo real.
kafka-console-comsumer --bootstrap-server kafka:9092 --topic first_topic

#Es como el comando anterior y ademas te muestra todos los mensajes que se enviaron a ese topic.
kafka-console-comsumer --bootstrap-server kafka:9092 --topic first_topic --from-beginning

kafka-console-consumer usa un random group id


#CONSUMERS GROUPS
#SE OBSERVA QUE SI TENES UN TOPIC CON 3 PARTICIONES Y DOS O TRES CONSUMERS EN EL GROUP, EL MENSAJE QUE ENVIA EL PRODUCERS
#SOLO LE LLEGA A UN CONSUMERS Y NO A TODOS LOS QUE ESTAN EN GROUP CONSUMERS, DEBIDO A ESTO ES AUTOBALENCEADO.
#SI SE TIENE UNA CANTIDAD DE CONSUMERS EN EL GROUP MAYOR A LA CANTIDAD DE PARTICIONES DEL TOPIC, HAY CONSUMERS QUE HACEN NADA/NO LE LLAGAN MSJ,
LOS MSJ LE LLEGAN A LOS DEMAS CONSUMERS
#consumer ONE
kafka-console-comsumer --bootstrap-server kafka:9092 --topic first_topic --group my-first-app
#consumer TWO
kafka-console-comsumer --bootstrap-server kafka:9092 --topic first_topic --group my-first-app


#CONTEXTO
#EL PRODUCERS ESCRIBIO EL TOPIC first_topic, SE CREA UN CONSUMERS CON UN NUEVO GROUP CONSUMER my-second-app
#EL CUAL QUIERE RECIBIR TODOS LOS MENSAJES DEL TOPIC first_topic
#EN ESTE CONTEXTO VA A PODER VER TODOS LOS MENSAJES DEL TOPIC, DADO QUE SE CREO UN NUEVO GROUP CONSUMER Y NADIE READ LOS MENSAJES
#SI VOLVEMOS A EJECUTAR EL MISMO COMANDO Y NINGUN PROCEDURS ESCRIBIO EN EL TOPIC, NO VAMOS A RECIBIR LOS MENSAJES ANTERIORES
#PORQUE OTRO CONSUMER YA LOS LEYO
kafka-console-comsumer --bootstrap-server kafka:9092 --topic first_topic --group my-second-app --from-beginning


#REQUIERE --bootstrap-server (es el kafka) y el topic
#Muestra la lista de los group consumer.
kafka-consumer-groups --bootstrap-server kafka:9092 --list

#REQUIERE --bootstrap-server (es el kafka) y el topic
#Muestra la informacino del group consumer, por ejemplo cuantos consumers ACTIVOS TIENE
#De cada particion que offset fue el ultimo leido.
kafka-consumer-groups --bootstrap-server kafka:9092 --describe --group my-first-app


#REQUIERE --bootstrap-server (es el kafka) y el topic
#RESETEAR LOS OFFSETS A 0 DE CADA PARTICION DE UN TOPIC, PARA UN GROUP CONSUMER.
kafka-consumer-groups --bootstrap-server kafka:9092 --group my-first-app --reset-offsets --to-earliest --execute --topic first_topic

#REQUIERE --bootstrap-server (es el kafka) y el topic
#RESTA O SUMA LOS OFFSETS DE CADA PARTICION DE UN TOPIC, PARA UN GROUP CONSUMER.
kafka-consumer-groups --bootstrap-server kafka:9092 --group my-first-app --reset-offsets --shift-by 2 --execute --topic first_topic


kafka-console-producer --broker-list 127.0.0.1:9092 --topic first_topic --property parse.key=true --property key.separator=,
> key,value
> another key,another value

kafka-console-consumer --bootstrap-server 127.0.0.1:9092 --topic first_topic --from-beginning --property print.key=true --property key.separator=,


#RESETEAR LOS OFFSETS, PARA LEER LOS DATOS OTRA VEZ
kafka-consumer-groups.sh --bootstrap-server kafka:9092 --group kafka-demo-elasticsearch --reset-offsets --execute --to-earliest --topic twitter_tweets



Conduktor - Kafka GUI
Kafka no viene con una interfaz de usuario, pero he creado un software llamado Conduktor para ayudarlo a usar Kafka visualmente.
Puede descargar Conduktor aquí: https://www.conduktor.io/
Conduktor le permite realizar todas las tareas administrativas en Kafka (como crear temas, particiones, etc.), así como producir y consumir, todo desde una aplicación de escritorio que debería funcionar en Windows, Mac y Linux.
Consulte estas dos páginas en caso de que tenga problemas:
Documentación: https://www.conduktor.io/docs
Preguntas frecuentes sobre problemas de instalación (en la parte inferior de la página): https://www.conduktor.io/download
Finalmente, siga a @GetConduktor en Twitter para conocer las últimas actualizaciones.
Aquí hay algunas capturas de pantalla del software:



//obtener descripcion de la configuracion del topic
kafka-configs --zookeeper zookeeper:2181 --entity-type topics --entity-name config-topic --describe

//agregar configuracion al topic
kafka-configs --zookeeper zookeeper:2181 --entity-type topics --entity-name config-topic --add-config

//agregar configuracion al topic
kafka-configs --zookeeper zookeeper:2181 --entity-type topics --entity-name config-topic --add-config min.insync.replicas=2 --alter

//eliminar configuracion del topic
kafka-configs --zookeeper zookeeper:2181 --entity-type topics --entity-name config-topic --delete-config min.insync.replicas --alter

